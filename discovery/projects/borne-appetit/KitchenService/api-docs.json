{
    "swaggerDoc": {
      "openapi": "3.0.0",
      "paths": {
        "/health": {
          "get": {
            "operationId": "HealthController_check",
            "parameters": [],
            "responses": {
              "200": {
                "description": "The Health Check is successful",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "ok"
                        },
                        "info": {
                          "type": "object",
                          "example": {
                            "database": {
                              "status": "up"
                            }
                          },
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "nullable": true
                        },
                        "error": {
                          "type": "object",
                          "example": {},
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "nullable": true
                        },
                        "details": {
                          "type": "object",
                          "example": {
                            "database": {
                              "status": "up"
                            }
                          },
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "503": {
                "description": "The Health Check is not successful",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "error"
                        },
                        "info": {
                          "type": "object",
                          "example": {
                            "database": {
                              "status": "up"
                            }
                          },
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "nullable": true
                        },
                        "error": {
                          "type": "object",
                          "example": {
                            "redis": {
                              "status": "down",
                              "message": "Could not connect"
                            }
                          },
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "nullable": true
                        },
                        "details": {
                          "type": "object",
                          "example": {
                            "database": {
                              "status": "up"
                            },
                            "redis": {
                              "status": "down",
                              "message": "Could not connect"
                            }
                          },
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "tags": [
              "health"
            ]
          }
        },
        "/preparations": {
          "get": {
            "operationId": "PreparationsController_getAllPreparationsByStateAndTableNumber",
            "parameters": [
              {
                "name": "tableNumber",
                "required": false,
                "in": "query",
                "schema": {}
              },
              {
                "name": "state",
                "required": true,
                "in": "query",
                "schema": {
                  "enum": [
                    "readyToBeServed",
                    "preparationStarted"
                  ],
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The preparations filtered by state and/or table number.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PreparationDto"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "State in params is not a valid preparation state.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/WrongQueryParameterException"
                    }
                  }
                }
              },
              "404": {
                "description": "Table number in params is not a valid table number.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TableNumberNotFoundException"
                    }
                  }
                }
              }
            },
            "tags": [
              "Preparations"
            ]
          },
          "post": {
            "operationId": "PreparationsController_requestNewPreparation",
            "parameters": [],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PreparationRequestDto"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "The new preparations corresponding to items sent to cook.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PreparationDto"
                      }
                    }
                  }
                }
              },
              "404": {
                "description": "Table number in params is not a valid table number.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TableNumberNotFoundException"
                    }
                  }
                }
              },
              "422": {
                "description": "Empty item list sent to the kitchen",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/EmptyItemsToBeCookedSentInKitchenException"
                    }
                  }
                }
              }
            },
            "tags": [
              "Preparations"
            ]
          }
        },
        "/preparations/{preparationId}": {
          "get": {
            "operationId": "PreparationsController_retrievePreparation",
            "parameters": [
              {
                "name": "preparationId",
                "required": true,
                "in": "path",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The searched preparation.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparationDto"
                    }
                  }
                }
              },
              "404": {
                "description": "Preparation Id not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparationIdNotFoundException"
                    }
                  }
                }
              }
            },
            "tags": [
              "Preparations"
            ]
          }
        },
        "/preparations/{preparationId}/takenToTable": {
          "post": {
            "operationId": "PreparationsController_preparationIsServed",
            "parameters": [
              {
                "name": "preparationId",
                "required": true,
                "in": "path",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The preparation has been successfully declared as brought to the table.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparationDto"
                    }
                  }
                }
              },
              "404": {
                "description": "Preparation Id not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparationIdNotFoundException"
                    }
                  }
                }
              },
              "422": {
                "description": "Preparation not yet ready in the kitchen",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparationNotReadyInKitchenException"
                    }
                  }
                }
              }
            },
            "tags": [
              "Preparations"
            ]
          }
        },
        "/preparedItems/{preparedItemId}": {
          "get": {
            "operationId": "PreparedItemsController_retrievePreparedItem",
            "parameters": [
              {
                "name": "preparedItemId",
                "required": true,
                "in": "path",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The searched prepared item.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparedItem"
                    }
                  }
                }
              },
              "404": {
                "description": "Prepared Item Id not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparedItemIdNotFoundException"
                    }
                  }
                }
              }
            },
            "tags": [
              "Prepared Items"
            ]
          }
        },
        "/preparedItems/{preparedItemId}/recipe": {
          "get": {
            "operationId": "PreparedItemsController_retrievePreparedItemRecipe",
            "parameters": [
              {
                "name": "preparedItemId",
                "required": true,
                "in": "path",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The searched prepared item's recipe.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Recipe"
                    }
                  }
                }
              },
              "404": {
                "description": "Prepared Item Id not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparedItemIdNotFoundException"
                    }
                  }
                }
              }
            },
            "tags": [
              "Prepared Items"
            ]
          }
        },
        "/preparedItems": {
          "get": {
            "operationId": "PreparedItemsController_getPreparatedItemsToStartByPost",
            "parameters": [
              {
                "name": "post",
                "required": true,
                "in": "query",
                "schema": {
                  "enum": [
                    "BAR",
                    "COLD_DISH",
                    "HOT_DISH"
                  ],
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "All items to start cooking now for the requested post.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PreparedItem"
                      }
                    }
                  }
                }
              }
            },
            "tags": [
              "Prepared Items"
            ]
          }
        },
        "/preparedItems/{preparedItemId}/start": {
          "post": {
            "operationId": "PreparedItemsController_startToPrepareItemOnPost",
            "parameters": [
              {
                "name": "preparedItemId",
                "required": true,
                "in": "path",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The started prepared item.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparedItem"
                    }
                  }
                }
              },
              "404": {
                "description": "Prepared Item Id not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparedItemIdNotFoundException"
                    }
                  }
                }
              },
              "422": {
                "description": "Item already started cooking inside the kitchen",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ItemAlreadyStartedToBeCookedException"
                    }
                  }
                }
              }
            },
            "tags": [
              "Prepared Items"
            ]
          }
        },
        "/preparedItems/{preparedItemId}/finish": {
          "post": {
            "operationId": "PreparedItemsController_finishToPrepareItemOnPost",
            "parameters": [
              {
                "name": "preparedItemId",
                "required": true,
                "in": "path",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The finished prepared item.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparedItemDto"
                    }
                  }
                }
              },
              "404": {
                "description": "Prepared Item Id not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PreparedItemIdNotFoundException"
                    }
                  }
                }
              },
              "422": {
                "description": "Item not started to be cooked inside the kitchen",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ItemNotStartedToBeCookedException"
                    }
                  }
                }
              }
            },
            "tags": [
              "Prepared Items"
            ]
          }
        }
      },
      "info": {
        "title": "Micro-Service Restaurant: Kitchen Service",
        "description": "Kitchen Service Open API definition",
        "contact": {}
      },
      "tags": [],
      "servers": [
        {
          "url": "/",
          "description": "Without gateway"
        },
        {
          "url": "/kitchen",
          "description": "Through gateway"
        }
      ],
      "components": {
        "schemas": {
          "PreparedItemDto": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "shortName": {
                "type": "string"
              },
              "shouldStartAt": {
                "type": "string"
              },
              "startedAt": {
                "type": "string"
              },
              "finishedAt": {
                "type": "string"
              }
            },
            "required": [
              "_id",
              "shortName",
              "shouldStartAt",
              "startedAt",
              "finishedAt"
            ]
          },
          "PreparationDto": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "tableNumber": {
                "type": "number"
              },
              "shouldBeReadyAt": {
                "type": "string"
              },
              "completedAt": {
                "type": "string"
              },
              "takenForServiceAt": {
                "type": "string"
              },
              "preparedItems": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PreparedItemDto"
                }
              }
            },
            "required": [
              "_id",
              "tableNumber",
              "shouldBeReadyAt",
              "completedAt",
              "takenForServiceAt",
              "preparedItems"
            ]
          },
          "WrongQueryParameterException": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "details": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "details"
            ]
          },
          "TableNumberNotFoundException": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "details": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "details"
            ]
          },
          "ItemToBeCookedDto": {
            "type": "object",
            "properties": {
              "menuItemShortName": {
                "type": "string"
              },
              "howMany": {
                "type": "number",
                "minimum": 1
              }
            },
            "required": [
              "menuItemShortName",
              "howMany"
            ]
          },
          "PreparationRequestDto": {
            "type": "object",
            "properties": {
              "tableNumber": {
                "type": "number"
              },
              "itemsToBeCooked": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemToBeCookedDto"
                }
              }
            },
            "required": [
              "tableNumber",
              "itemsToBeCooked"
            ]
          },
          "EmptyItemsToBeCookedSentInKitchenException": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "details": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "details"
            ]
          },
          "PreparationIdNotFoundException": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "details": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "details"
            ]
          },
          "PreparationNotReadyInKitchenException": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "details": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "details"
            ]
          },
          "Recipe": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "shortName": {
                "type": "string"
              },
              "post": {
                "enum": [
                  "BAR",
                  "COLD_DISH",
                  "HOT_DISH"
                ],
                "type": "string"
              },
              "cookingSteps": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "meanCookingTimeInSec": {
                "type": "number"
              }
            },
            "required": [
              "_id",
              "shortName",
              "post",
              "cookingSteps",
              "meanCookingTimeInSec"
            ]
          },
          "PreparedItem": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "shortName": {
                "type": "string"
              },
              "recipe": {
                "$ref": "#/components/schemas/Recipe"
              },
              "shouldStartAt": {
                "format": "date-time",
                "type": "string"
              },
              "startedAt": {
                "format": "date-time",
                "type": "string"
              },
              "finishedAt": {
                "format": "date-time",
                "type": "string"
              }
            },
            "required": [
              "_id",
              "shortName",
              "recipe",
              "shouldStartAt",
              "startedAt",
              "finishedAt"
            ]
          },
          "PreparedItemIdNotFoundException": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "details": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "details"
            ]
          },
          "ItemAlreadyStartedToBeCookedException": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "details": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "details"
            ]
          },
          "ItemNotStartedToBeCookedException": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "details": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "details"
            ]
          }
        }
      }
    },
    "customOptions": {}
  }